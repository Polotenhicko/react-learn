// это JSX, - расширение языка JS. Он напоминает язык шаблонов, наделённой силой JS
// JSX производит элементы React
// можно вставлять переменные внутрь JSX при помощи фигурных скобок
const fn = () => "!!!!!";
const name = "Иван";
// после компиляции каждое JSX выражение становится обычным вызовом JS функции, результат которого - объект
// значит можно использовать внутри конструкции if и циклов for, присваивать переменные, передавать функции
const h1 = <h1>H1</h1>;
// React DOM по умолчанию экранирует и защищает от xss атаки
const title = "<script>alert(1)</script>"; // скрипт из инета

const greeting = (
	// Здравствуйте, Иван, 4, !!!!!
	// Чтобы использовать строковый литерал в качестве значения атрибута, используются кавычки:
	// и тут можно использовать скобки
	// id = 4
	<div>
		<a href="#" id={2 + 2}>
			Здравствуйте, {name}, {2 + 2}, {fn()}
			{h1}
			{/* <script>alert(1)</script> */}
			{title}
		</a>
	</div>
	// JSX еги могут содержать дочерние элементы
	// поскольку JSX ближе к JS, чем к HTML, то используется camelcase

	// Babel компилирует JSX в вызовы React.createElement().
	// const element = (
	// <h1 className="greeting">
	//   Привет, мир!
	// </h1>
	// эквивалентнен
	// const element = React.createElement(
	//   'h1',
	//   {className: 'greeting'},
	//   'Привет, мир!'
	// 	);
	// );
);
export { greeting };

// React.createElement() проводит некоторые проверки с целью выявить баги в коде, но главное — создаёт объект похожий на такой:
// Примечание: этот код несколько упрощён.
const element = {
	type: "h1",
	props: {
		className: "greeting",
		children: "Привет, мир!",
	},
};

export { element };

// Эти объекты называются React - элементами.Можно сказать,
// 	что они описывают результат, который мы хотим увидеть на экране.
// React читает эти объекты и использует их, чтобы конструировать и поддерживать DOM.
