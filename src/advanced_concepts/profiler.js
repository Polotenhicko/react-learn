import { useState } from 'react';
import { Profiler } from 'react';
// Profiler измеряет то, как часто рендерится React-приложение и какова «стоимость» этого

// Профилирование добавляет накладные расходы, поэтому оно отключено в продакшен-режиме.
// Profiler может быть добавлен в любую часть React-дерева для измерения стоимости рендеринга этой части

// Он принимает два пропа: id (string) и колбэк onRender (function), который React вызывает каждый раз, когда компонент
// внутри дерева «фиксирует» обновление.

function callback() {
  // будет вызываться при каждом обновлении
  console.log('render', ...arguments);
}

function Navigation() {
  const [count, setCount] = useState(0);
  // Можно исползовать несколько профайлеров
  // Также Profiler может быть вложенным с целью замера разных компонентов внутри поддерева:
  return (
    <Profiler id="Navigation" onRender={callback}>
      <nav>
        <Profiler id="Button" onRender={callback}>
          <button onClick={() => setCount(count + 1)}>{count}</button>
        </Profiler>
      </nav>
    </Profiler>
  );
}

// React вызывает эту функцию каждый раз, когда компонент внутри профилируемого дерева «фиксирует» изменение.
// Эта функция принимает параметры, которые описывают, что было отрендерено и сколько времени это заняло.

function onRenderCallback(
  id, // проп "id" из дерева компонента Profiler, для которого было зафиксировано изменение
  phase, // либо "mount" (если дерево было смонтировано), либо "update" (если дерево было повторно отрендерено)
  actualDuration, // время, затраченное на рендер зафиксированного обновления
  baseDuration, // предполагаемое время рендера всего поддерева без кеширования
  startTime, // когда React начал рендерить это обновление
  commitTime, // когда React зафиксировал это обновление
  interactions // Множество «взаимодействий» для данного обновления
) {
  // Обработка или логирование результатов...
}
export { Navigation };
